Inventory <|-- WeaponWheel
Consumable<|-- Armor
Consumable <|-- Snaks
IIsPickupAble <|- Consumable
IIsPickupAble <|- PickupableWeapon

RangedWeapon <|-- Weapon_SMG
Throwables <|-- Weapon_Grenade
MeleeWeapon <|-- Weapon_Baseballbat
MeleeWeapon <|-- Weapon_BrassKnuckles
Weapon <|-- RangedWeapon
Weapon <|-- MeleeWeapon
Weapon <|-- Throwables
IEquipable <|- Weapon

Interface IIsPickupAble
{
  Private void AddToAmount()
}

interface IEquipable
{
 void Equip()
 void Unequip()
}

Class Consumable
{
  Public int amount
}

Class Inventory
{
  Dictionary<T, Weapon> allWeaponsInInventory
  List<Consumables> allConsumablesInInventory

  bool HasWeapon<T>(T _weaponType)
  void AddAmmoToWeapon(T _weaponType, int ammoAmount)
} 

Class Armor
{
  Private Int armorAmount
  Private float armorIncrease
  Private void UseArmor()
}

Class Snaks
{
  Private Int snakAmount
  Private float snakIncrease
  Private void UseSnack()
}


Class WeaponWheel
{
  Private Sprite currentWeapon
  Private String weaponName
  Private String attachments
  Private Bool hasParachute
  Private List<Weapon> selectedWeapon
  selectedWeapon.Equip()
}

Class UI
{
  Private Bool isOpen
  Private int slowDownGameAmount
}


abstract class Weapon
{
public WeaponStats weaponStats
public Material skin

public Sprite uiSprite

protected abstract void Use()
protected abstract void UseContinuously()

}

class RangedWeapon
{
List<AttachableToWeapon> weaponAttachments


public void AddAmmo(int amount)
protected void ApplyAttachmentStats()
}

class MeleeWeapon
{

}

class Throwables
{
private float throwRange
}


class Weapon_SMG
{

}

class Weapon_Grenade
{

}


class Weapon_Baseballbat
{

}

class Weapon_BrassKnuckles
{

}


class AttachableToWeapon
{
WeaponStats modifyingStats

public WeaponStats CalculateModifiedWeaponStats(WeaponStats _originalStats)
}

struct WeaponStats
{
public float damage
public float range
public float rateOfFire
public float accuracy

int ammoAmount
int magazineSize
int currentMagazine
}

class PickupableWeapon
{
 private void AddWeaponToInventory<T>(T weaponToAdd)
 private void AddAmmoToInventory<T>(T weaponType, int ammoAmount)
}